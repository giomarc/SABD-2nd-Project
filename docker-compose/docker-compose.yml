version: "2"

networks:
    app_network:
        driver: bridge

services:

    zookeeper:
        image: wurstmeister/zookeeper
        container_name: zookeeper
        hostname: zookeeper
        networks:
            - app_network
        ports:
            - '2181:2181'
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
    
    kafka:
        image: wurstmeister/kafka
        container_name: kafka
        hostname: kafka
        networks:
            - app_network
        ports:
            - '9092:9092'
        depends_on:
            - zookeeper
        environment:
            - KAFKA_ADVERTISED_HOST_NAME=kafka
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_LOG_RETENTION_HOURS=1
            - KAFKA_MESSAGE_MAX_BYTES=2000000000
            - KAFKA_CREATE_TOPICS=query1:1:1

    jobmanager:
        #image: erreesse/flink
        image: flink:1.8-scala_2.11
        hostname: jobmanager
        container_name: jobmanager
        expose:
            - "6123"
        networks:
            - app_network
        ports:
            - "8081:8081"
        # depends_on:
        #     - master
        command: jobmanager
        environment:
            - JOB_MANAGER_RPC_ADDRESS=jobmanager
        volumes:
            - ./flink_jar:/sabd/jar
            - ./result:/sabd/result

    taskmanager:
        #image: erreesse/flink
        image: flink:1.8-scala_2.11
        hostname: taskmanager1
        container_name: taskmanager1
        networks:
            - app_network
        expose:
            - "6121"
            - "6122"
            #- "5005" # remote intellij debug
        #ports:
            #- "5005:5005" # remote intellij debug
        # depends_on:
        #     - master
        depends_on:
            - jobmanager
        command: taskmanager
        environment:
            - JOB_MANAGER_RPC_ADDRESS=jobmanager
        volumes:
            - ./result:/sabd/result



    kafka-producer:
        image: wurstmeister/kafka
        container_name: kafka-producer
        hostname: kafka-producer
        networks:
            - app_network
        expose:
            - "5005" # remote intellij debug
        ports:
            - "5005:5005" # remote intellij debug
        depends_on:
            - zookeeper
            - kafka
        environment:
            - KAFKA_ADVERTISED_HOST_NAME=kafka
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
            - KAFKA_LOG_RETENTION_HOURS=1
            - KAFKA_MESSAGE_MAX_BYTES=2000000000
        entrypoint: /bin/sh
        stdin_open: true
        tty: true
        volumes:
            - ./dataset:/sabd/dataset

    alluxio-master:
        image: alluxio/alluxio
        container_name: alluxio-master
        hostname: alluxio-master
        networks:
            - app_network
        ports:
            - "19999:19999" # remote intellij debug
        command: master
        volumes: 
            - data-alluxio:/opt/alluxio/underFSStorage

    alluxio-worker:
        image: alluxio/alluxio
        container_name: alluxio-worker
        hostname: alluxio-worker
        networks:
            - app_network
        command: worker
        environment:
            - ALLUXIO_MASTER_HOSTNAME=alluxio-worker
            - ALLUXIO_WORKER_MEMORY_SIZE=1G
        volumes: 
            - data-alluxio:/opt/alluxio/underFSStorage

volumes:
  data-alluxio:
    driver: local

    # master:
    #     build:
    #         context: ../docker-images/hdfs
    #     image: erreesse/hdfs
    #     container_name: master
    #     hostname: master
    #     networks:
    #         - app_network
    #     ports:
    #         - "9870:9870" # hdfs ui
    #         - "54310:54310" # hdfs 
    #     stdin_open: true
    #     tty: true
    #     environment: 
    #         - ISMASTER=1

    # slave1:
    #     image: erreesse/hdfs
    #     container_name: slave1
    #     hostname: slave1
    #     networks:
    #         - app_network
    #     ports:
    #         - "9864:9864"
    #     depends_on:
    #         - master
    #     stdin_open: true
    #     tty: true
    #     environment: 
    #         - ISMASTER=0

  
    # slave2:
    #     image: erreesse/hdfs
    #     container_name: slave2
    #     hostname: slave2
    #     networks:
    #         - app_network
    #     ports:
    #         - "9863:9864"
    #     depends_on:
    #         - master
    #     stdin_open: true
    #     tty: true
    #     environment: 
    #         - ISMASTER=0


    # slave3:
    #     image: erreesse/hdfs
    #     container_name: slave3
    #     hostname: slave3
    #     networks:
    #         - app_network
    #     ports:
    #         - "9862:9864"
    #     depends_on:
    #         - master
    #     stdin_open: true
    #     tty: true
    #     environment: 
    #         - ISMASTER=0
  